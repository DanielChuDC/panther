// Code generated for package logschema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.json
package logschema

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x7b\x6f\x14\x39\x12\xff\x3f\x9f\xc2\x6a\x72\xd2\x1d\x4c\x98\x70\x39\x6e\x45\xa4\xd5\x2a\x04\x58\x90\x78\x44\x64\x01\x2d\x99\x49\xe4\x74\x57\xcf\x98\x75\xdb\xbd\xb6\x7b\x92\x80\xe6\xbb\xaf\xfa\xdd\x76\xdb\xfd\x48\x32\xac\x60\xf9\x03\x32\x63\x57\x95\x5d\xe5\x5f\x3d\x5c\x9e\x2f\x5b\x08\x79\xdb\xd2\x5f\x42\x84\xbd\x7d\xe4\x2d\x95\x8a\xf7\xa7\xd3\x4f\x92\xb3\x9d\x7c\xf4\x3e\x17\x8b\x69\x20\x70\xa8\x76\x76\x7f\x9a\xe6\x63\x77\xbc\x49\xca\xa7\x88\xa2\x90\x72\x1d\x61\xa6\x96\x20\x10\xe5\x0b\x54\xc8\xca\x08\xb6\x49\x50\x0a\x95\xfb\xd3\xa9\x48\x58\x9c\x53\xde\x27\xbc\x10\x25\xa7\x94\x2f\x64\x0c\xfe\x74\xb5\x5b\x30\x09\x08\x53\xae\x3b\xd3\x00\x42\xc2\x88\x22\x9c\xc9\x82\xfa\x38\x06\x3f\xa7\x6a\xcc\x79\xfb\x28\x55\x03\x21\xaf\x41\x54\x8e\xa5\xdb\xbc\x8a\xb3\x5d\xf2\xf3\x4f\xe0\xab\x8c\x3d\x1b\x8f\x05\x8f\x41\x28\x02\xb2\x41\x8d\x90\xb7\x02\x21\x09\x67\xda\x20\x42\x9e\xcf\x99\x54\xde\x3e\xda\xad\x06\xd7\x93\x9a\xa9\x32\xa1\xc6\x53\x2e\x2d\x95\x20\x6c\xe1\x4d\x9a\x73\x11\x61\x2f\x81\x2d\xd4\xd2\xdb\x47\x7b\xda\x4c\x8c\x95\x02\x91\x6e\xc0\x3b\x3d\x39\xd8\xf9\x38\x4f\xff\xc3\x3b\x9f\x77\x77\x1e\xcd\xef\xfd\x7b\x36\xbb\xdf\x1a\xfc\xcf\x2f\xdb\x9e\x75\x5b\x01\x48\x5f\x90\x58\x59\xf4\x31\xf6\x66\x65\x17\x10\x82\x00\xe6\xc3\xbb\xb7\x2f\xc7\xe8\x16\x72\x11\xe1\xd4\x58\x5e\x22\x88\x5d\x74\x8c\x85\x04\xe1\x12\x6a\x9c\x55\x6e\x30\x7c\x79\xd4\x3c\xb2\x07\xa6\x39\x3b\x66\x1d\x67\x9d\x1f\xac\x5c\xb5\x06\x11\xf2\x38\x83\x37\x29\x10\x4f\x8c\x09\xd4\x22\xcd\xc8\xed\xb0\xcd\xb5\x3c\x3c\x7e\xff\x81\xa8\xe5\x73\xc0\x01\x08\xaf\xc5\xbd\x9e\xdc\xda\x12\x3c\x51\xce\x55\x8c\x91\xf9\x56\xc7\x1e\xbc\x10\x4b\x15\x61\xe5\x2f\x6d\xa6\xe9\xda\xc8\x33\x2c\xd5\xab\x8c\xb1\x53\xbe\x80\x05\x5c\x8e\x95\xfd\x36\x65\x1a\x20\x9c\x61\x45\x56\x30\x56\xfa\xeb\x9c\x6b\xcb\x65\xb4\xb5\x15\xc7\x21\x01\x1a\x98\xa8\x72\xac\x93\xa3\xfa\x59\xce\xe1\xf0\xd7\x76\x58\x2b\xa6\xba\x5c\xa3\x88\x18\x47\x1d\x28\x6f\x47\x92\xed\xe1\x06\x5a\x61\x9a\x40\x16\x57\xdd\xd6\xd1\x36\x84\x83\x20\x63\xc5\x54\xdb\x53\x88\xa9\x84\x2d\x93\xbd\x62\xf5\x04\xfc\x99\x10\x01\x69\xd6\x38\xa9\xe2\xf0\xa4\x32\x72\x0e\xd9\x82\xdc\xd3\xac\x69\x89\xf7\x58\x08\x7c\x55\x87\xfb\x88\xb0\x17\x0a\x22\x2d\x36\x78\xa4\x18\x69\x84\x7f\xbb\x05\xb2\x1d\x34\x2d\xb0\xd6\xf6\x52\x4f\x37\x36\x82\x29\x35\x22\xc8\xf0\x03\xed\x38\x49\x86\x23\x2b\xb6\x5d\x01\xbd\x75\x3a\xba\xa1\x9d\x72\xce\x39\xa7\x80\x59\xb7\xa0\x82\x78\x20\x8e\x52\xea\x63\xbf\x05\x23\x43\xa6\x3b\x69\xf5\xeb\xe9\x44\xa4\x06\xad\xcc\x84\x93\x42\xd4\xdc\xe6\x89\x03\xbc\xd9\xe2\x14\xe5\xf2\x3a\x50\x6b\xc2\x06\x38\xda\xe9\x65\xc0\x92\xb9\xca\xc6\x9a\xa3\x36\x9d\x83\xed\x26\x12\x32\xb7\xba\x89\x00\xe9\x63\x8a\xc5\x4d\x24\x28\x12\x99\x86\x1f\xc5\x2f\x20\x1c\x72\x6e\x15\x5a\x2d\xc1\xc5\xa8\x7a\x3c\x60\x49\xa4\x9d\x66\xbb\x2e\x6a\x3b\xba\x11\xa2\x10\xf2\xd2\xc2\xbb\xf9\x9d\x30\x8d\x3e\xa4\x1c\x6b\x03\x32\xc2\x94\x1a\x44\xe7\x64\x61\x8e\x14\x9e\xdc\x18\x4a\x4d\x28\x15\x8e\x62\x4f\x2f\xf7\x3c\xab\x25\x1a\xa8\xb9\x41\x61\x6d\x89\x15\x55\x55\x5d\x0a\xd9\x54\x8e\xed\x4e\x35\xd9\xce\x5c\x79\xa6\x06\xfc\xa6\x74\xcf\x61\x60\x55\x1d\x28\x44\xc0\xd4\x30\xdd\x3b\x22\x52\x8f\xe2\xe5\x32\xba\xe6\x0d\x4f\xbd\x65\xd5\xbb\x2e\x0f\xa5\x2b\xe5\xe0\xaf\x40\x5f\x03\xbb\x09\xfb\xd2\x65\x6a\x90\xcf\x47\xe9\x6e\x28\x5c\xc7\xd7\x4d\x9d\x75\xd7\x75\x8b\xb0\x80\xf8\x58\x71\xe1\x2c\xfe\xcc\x80\x61\xdc\x23\xf5\x4b\x4f\xbb\xb8\xe9\xc0\x4e\xb5\x76\x33\xa1\xda\x4b\x5e\x4c\x29\xbf\x78\x9f\x62\xad\xed\x93\x3e\x8f\x0a\xbc\x7a\x07\x29\x19\x04\x68\x95\x53\x4e\x36\xa5\x4f\x07\x96\x4c\x71\xbd\xaa\x05\xc0\xae\xfa\x35\x7b\x02\x8c\x7c\x0b\x8a\x8d\xc6\x7f\x0d\x82\x6b\xa5\x3c\xa2\x65\x93\x80\x47\x98\x68\x49\x67\xc9\xa5\xca\x4b\xaf\x7a\x2c\x11\xb4\xf9\x35\x0a\x1e\x6a\xf9\x6d\x89\x1f\x18\xdf\xff\xfb\xf0\xff\x5a\x0a\xbd\x90\x67\x58\xb0\xd6\x90\xef\xf3\x84\xa9\x33\x12\x98\x33\x84\x49\x85\x99\x0f\x96\x29\x85\xb5\x7c\xad\x04\x6e\x91\x25\x12\x84\xa9\x02\x44\x98\x68\x4a\x30\x50\x67\x38\x08\x84\x3d\x99\x56\xd5\xcb\xa6\x42\x4c\x9d\xdb\xed\x51\x46\x3e\x5d\x01\x53\xbf\x91\xd6\x35\xc2\x5d\xfa\xaf\x8d\xd2\xe1\x59\xd9\xe0\xd1\xd8\xed\x2d\x93\xbe\x02\xde\xec\x7e\xd4\x7d\xc5\xc7\x09\xa1\x6a\x87\x30\x54\x69\x84\x8a\xce\x52\x8b\x47\xbf\x33\x78\x87\x3c\x8a\x78\x9b\x4f\xb6\x19\xab\x6c\x23\x42\x7f\x6f\x6f\xef\x51\x9a\x4a\x12\x46\x2e\xcb\xbf\x67\x91\xac\x3e\x26\xf5\x47\x96\x7d\xf4\x29\x4f\x82\x90\x62\xd1\xbc\x45\xa0\xf6\x95\xe6\xfa\x26\x38\x4c\xa4\xe2\xd1\x78\x03\x1c\x20\xbf\xe6\x2c\x98\x10\x61\x48\x2a\x11\x66\x43\x8c\x2b\x9c\x11\xb7\x24\x35\xda\x8f\xff\x3a\xc1\x07\xe7\x8f\xfd\xc3\x20\x7c\xfe\xe2\x53\xf4\x2a\x3e\x7e\x77\xf1\xe1\xf2\xea\xf7\xcf\x1f\xe7\x9d\x37\xb8\xeb\xab\xfb\x2b\x47\x14\x5f\xf1\x44\xdd\x9e\xc6\x8b\x4a\xe4\x20\x95\x4f\x73\xe2\x9f\xdd\xf7\xca\x71\x05\xc6\x44\x73\x18\x3d\x12\x94\xf7\x90\x4d\x05\x82\x46\x3d\x6f\xb8\x30\x16\x0b\x68\xb9\xef\xd0\x6e\xf5\x83\xc1\x06\xc8\x97\xd1\x2f\xda\xa5\xf2\xb6\xd6\xe8\x00\x43\x68\x0b\x2c\xb1\x2c\x38\xe7\xbd\x96\xaa\x69\x1d\xe6\x52\x22\x01\x47\x51\x40\x49\x44\x94\xbb\x5b\xdd\x59\xc5\x4e\x52\xfd\x67\x99\x15\x50\xbd\xcd\x42\x70\x88\x13\x9a\x1d\xd5\xc4\x7e\x50\x3e\xa7\x49\xe4\xee\x05\xda\xab\x8c\x56\x9b\x0b\x7d\xa5\xea\x49\xfe\x41\xe2\x23\x01\x21\x31\x3b\xbb\xd7\x81\x96\x96\x60\x63\xe5\x28\xcb\x36\x67\x89\x5e\x6d\x95\x20\xd1\x71\x8c\xfd\xeb\x65\x51\xb8\x8c\x31\x0b\x5a\xdd\x4b\xe4\xae\xd0\x15\x5c\xaa\xa3\xcc\x69\x9e\x36\x79\xdb\xce\xe8\x76\xb3\xfa\x79\x60\xac\xa7\x95\x40\xec\xf7\xb3\xbf\xd1\x5b\x7a\x5d\xdc\xe8\x3f\xff\x70\xb4\x1f\x8e\x76\xcb\x8e\x56\x3f\x7f\x8d\xf5\xb0\xfc\xb5\xad\xdf\xbf\x6c\xaf\x72\xb7\x79\x3a\x8e\xf7\x8f\xf2\x3d\xf0\xa8\x28\x95\xfe\x59\x18\xbd\x91\xb7\x7e\x4b\xf8\x7d\x6d\x3e\x9d\x5a\x1e\x4e\xfa\x31\x6a\x79\xa2\x72\xff\xde\xa0\x63\x37\x8d\x07\xdf\x4d\xb9\x53\x51\xfa\x3f\x49\xed\xb7\xd9\x77\xd7\xdd\x9d\x47\x67\xf3\xbb\xd6\x57\xd7\xbe\xfb\x91\x0b\x6f\x37\x7f\x82\x9d\x7c\xbd\xc0\x32\x36\xec\x7f\x57\x01\xe4\x3b\x09\x12\x0e\xae\x01\xce\xe9\x80\x63\xfb\x2a\x6b\x58\xcc\x78\x67\x37\xd3\xd0\xf8\xe7\xf6\x3e\xd0\xfc\xcf\x66\xe0\xc1\x92\x1a\xbf\x89\xcb\x36\x88\x2e\x88\x5a\xa2\x98\x62\x1f\x96\x9c\xa6\xa5\xa9\x46\xde\xec\x2a\xbf\x4a\xa4\x42\x3e\x67\x0a\x13\x86\xb0\x42\x14\xb0\x54\x88\x33\x70\xb3\x37\x5b\x35\x5f\x66\x33\x79\xf7\xe4\x74\x3d\xbf\x97\x7e\x98\xcd\xd6\xfd\xaf\xa3\xa3\x15\xc9\xba\x28\x70\x41\x09\x33\xfb\xde\x4d\x45\xde\x30\x7a\x85\xb2\x47\x82\x92\x38\x55\x47\x2d\x01\x01\x0b\x9c\x0a\x9c\x9e\x9c\xce\x66\x2c\xdd\x3d\xd3\x7e\xcd\x56\x7c\x2a\x9a\x07\x5b\xe9\xbf\xf5\xd6\x5f\x01\x00\x00\xff\xff\xf6\x25\xd2\xfd\xb8\x28\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": {schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
